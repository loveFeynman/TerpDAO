{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Creates a proposal in the governance module.",
      "type": "object",
      "required": [
        "propose"
      ],
      "properties": {
        "propose": {
          "type": "object",
          "required": [
            "description",
            "msgs",
            "title"
          ],
          "properties": {
            "description": {
              "description": "A description of the proposal.",
              "type": "string"
            },
            "msgs": {
              "description": "The messages that should be executed in response to this proposal passing.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CosmosMsg_for_Empty"
              }
            },
            "title": {
              "description": "The title of the proposal.",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Votes on a proposal. Voting power is determined by the DAO's voting power module.",
      "type": "object",
      "required": [
        "vote"
      ],
      "properties": {
        "vote": {
          "type": "object",
          "required": [
            "proposal_id",
            "vote"
          ],
          "properties": {
            "proposal_id": {
              "description": "The ID of the proposal to vote on.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote": {
              "description": "The senders position on the proposal.",
              "allOf": [
                {
                  "$ref": "#/definitions/Vote"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Causes the messages associated with a passed proposal to be executed by the DAO.",
      "type": "object",
      "required": [
        "execute"
      ],
      "properties": {
        "execute": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "description": "The ID of the proposal to execute.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Closes a proposal that has failed (either not passed or timed out). If applicable this will cause the proposal deposit associated wth said proposal to be returned.",
      "type": "object",
      "required": [
        "close"
      ],
      "properties": {
        "close": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "description": "The ID of the proposal to close.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the governance module's config.",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "allow_revoting",
            "dao",
            "max_voting_period",
            "only_members_execute",
            "threshold"
          ],
          "properties": {
            "allow_revoting": {
              "description": "Allows changing votes before the proposal expires. If this is enabled proposals will not be able to complete early as final vote information is not known until the time of proposal expiration.",
              "type": "boolean"
            },
            "dao": {
              "description": "The address if tge DAO that this governance module is associated with.",
              "type": "string"
            },
            "deposit_info": {
              "description": "Information about the deposit required to make a proposal. None if no deposit, Some otherwise.",
              "anyOf": [
                {
                  "$ref": "#/definitions/DepositInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_voting_period": {
              "description": "The default maximum amount of time a proposal may be voted on before expiring. This will only apply to proposals created after the config update.",
              "allOf": [
                {
                  "$ref": "#/definitions/Duration"
                }
              ]
            },
            "only_members_execute": {
              "description": "If set to true only members may execute passed proposals. Otherwise, any address may execute a passed proposal. Applies to all outstanding and future proposals.",
              "type": "boolean"
            },
            "threshold": {
              "description": "The new proposal passing threshold. This will only apply to proposals created after the config update.",
              "allOf": [
                {
                  "$ref": "#/definitions/Threshold"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_proposal_hook"
      ],
      "properties": {
        "add_proposal_hook": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_proposal_hook"
      ],
      "properties": {
        "remove_proposal_hook": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_vote_hook"
      ],
      "properties": {
        "add_vote_hook": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_vote_hook"
      ],
      "properties": {
        "remove_vote_hook": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BankMsg": {
      "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "type": "object",
              "required": [
                "amount",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "to_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CosmosMsg_for_Empty": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/Empty"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "$ref": "#/definitions/StakingMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "distribution"
          ],
          "properties": {
            "distribution": {
              "$ref": "#/definitions/DistributionMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A Stargate message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto). This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
          "type": "object",
          "required": [
            "stargate"
          ],
          "properties": {
            "stargate": {
              "type": "object",
              "required": [
                "type_url",
                "value"
              ],
              "properties": {
                "type_url": {
                  "type": "string"
                },
                "value": {
                  "$ref": "#/definitions/Binary"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ibc"
          ],
          "properties": {
            "ibc": {
              "$ref": "#/definitions/IbcMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "gov"
          ],
          "properties": {
            "gov": {
              "$ref": "#/definitions/GovMsg"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DepositInfo": {
      "description": "Information about the deposit required to create a proposal.",
      "type": "object",
      "required": [
        "deposit",
        "refund_failed_proposals",
        "token"
      ],
      "properties": {
        "deposit": {
          "description": "The number of tokens that must be deposited to create a proposal.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "refund_failed_proposals": {
          "description": "If failed proposals should have their deposits refunded.",
          "type": "boolean"
        },
        "token": {
          "description": "The address of the cw20 token to be used for proposal deposits.",
          "allOf": [
            {
              "$ref": "#/definitions/DepositToken"
            }
          ]
        }
      }
    },
    "DepositToken": {
      "description": "Information about the token to use for proposal deposits.",
      "oneOf": [
        {
          "description": "Use a specific token address as the deposit token.",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Use the token address of the associated DAO's voting module. NOTE: in order to use the token address of the voting module the voting module must (1) use a cw20 token and (2) implement the `TokenContract {}` query type defined by `cw_core_macros::token_query`. Failing to implement that and using this option will cause instantiation to fail.",
          "type": "object",
          "required": [
            "voting_module_token"
          ],
          "properties": {
            "voting_module_token": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DistributionMsg": {
      "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "set_withdraw_address"
          ],
          "properties": {
            "set_withdraw_address": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "The `withdraw_address`",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "withdraw_delegator_reward"
          ],
          "properties": {
            "withdraw_delegator_reward": {
              "type": "object",
              "required": [
                "validator"
              ],
              "properties": {
                "validator": {
                  "description": "The `validator_address`",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "GovMsg": {
      "oneOf": [
        {
          "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
          "type": "object",
          "required": [
            "vote"
          ],
          "properties": {
            "vote": {
              "type": "object",
              "required": [
                "proposal_id",
                "vote"
              ],
              "properties": {
                "proposal_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "vote": {
                  "$ref": "#/definitions/VoteOption"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcMsg": {
      "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
      "oneOf": [
        {
          "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
          "type": "object",
          "required": [
            "transfer"
          ],
          "properties": {
            "transfer": {
              "type": "object",
              "required": [
                "amount",
                "channel_id",
                "timeout",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Coin"
                    }
                  ]
                },
                "channel_id": {
                  "description": "exisiting channel to send the tokens over",
                  "type": "string"
                },
                "timeout": {
                  "description": "when packet times out, measured on remote chain",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcTimeout"
                    }
                  ]
                },
                "to_address": {
                  "description": "address on the remote chain to receive these tokens",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
          "type": "object",
          "required": [
            "send_packet"
          ],
          "properties": {
            "send_packet": {
              "type": "object",
              "required": [
                "channel_id",
                "data",
                "timeout"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                },
                "data": {
                  "$ref": "#/definitions/Binary"
                },
                "timeout": {
                  "description": "when packet times out, measured on remote chain",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcTimeout"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
          "type": "object",
          "required": [
            "close_channel"
          ],
          "properties": {
            "close_channel": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcTimeout": {
      "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
      "type": "object",
      "properties": {
        "block": {
          "anyOf": [
            {
              "$ref": "#/definitions/IbcTimeoutBlock"
            },
            {
              "type": "null"
            }
          ]
        },
        "timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "IbcTimeoutBlock": {
      "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
      "type": "object",
      "required": [
        "height",
        "revision"
      ],
      "properties": {
        "height": {
          "description": "block height after which the packet times out. the height within the given revision",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "revision": {
          "description": "the version that the client is currently on (eg. after reseting the chain this could increment 1 as height drops to 0)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "PercentageThreshold": {
      "description": "A percentage of voting power that must vote yes for a proposal to pass. An example of why this is needed:\n\nIf a user specifies a 60% passing threshold, and there are 10 voters they likely expect that proposal to pass when there are 6 yes votes. This implies that the condition for passing should be `yes_votes >= total_votes * threshold`.\n\nWith this in mind, how should a user specify that they would like proposals to pass if the majority of voters choose yes? Selecting a 50% passing threshold with those rules doesn't properly cover that case as 5 voters voting yes out of 10 would pass the proposal. Selecting 50.0001% or or some variation of that also does not work as a very small yes vote which technically makes the majority yes may not reach that threshold.\n\nTo handle these cases we provide both a majority and percent option for all percentages. If majority is selected passing will be determined by `yes > total_votes * 0.5`. If percent is selected passing is determined by `yes >= total_votes * percent`.\n\nIn both of these cases a proposal with only abstain votes must fail. This requires a special case passing logic.",
      "oneOf": [
        {
          "description": "The majority of voters must vote yes for the proposal to pass.",
          "type": "object",
          "required": [
            "majority"
          ],
          "properties": {
            "majority": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A percentage of voting power >= percent must vote yes for the proposal to pass.",
          "type": "object",
          "required": [
            "percent"
          ],
          "properties": {
            "percent": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StakingMsg": {
      "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "delegate"
          ],
          "properties": {
            "delegate": {
              "type": "object",
              "required": [
                "amount",
                "validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "undelegate"
          ],
          "properties": {
            "undelegate": {
              "type": "object",
              "required": [
                "amount",
                "validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "redelegate"
          ],
          "properties": {
            "redelegate": {
              "type": "object",
              "required": [
                "amount",
                "dst_validator",
                "src_validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "dst_validator": {
                  "type": "string"
                },
                "src_validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Threshold": {
      "description": "The ways a proposal may reach its passing / failing threshold.",
      "oneOf": [
        {
          "description": "Declares a percentage of the total weight that must cast Yes votes in order for a proposal to pass.  See `ThresholdResponse::AbsolutePercentage` in the cw3 spec for details.",
          "type": "object",
          "required": [
            "absolute_percentage"
          ],
          "properties": {
            "absolute_percentage": {
              "type": "object",
              "required": [
                "percentage"
              ],
              "properties": {
                "percentage": {
                  "$ref": "#/definitions/PercentageThreshold"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Declares a `quorum` of the total votes that must participate in the election in order for the vote to be considered at all. See `ThresholdResponse::ThresholdQuorum` in the cw3 spec for details.",
          "type": "object",
          "required": [
            "threshold_quorum"
          ],
          "properties": {
            "threshold_quorum": {
              "type": "object",
              "required": [
                "quorum",
                "threshold"
              ],
              "properties": {
                "quorum": {
                  "$ref": "#/definitions/PercentageThreshold"
                },
                "threshold": {
                  "$ref": "#/definitions/PercentageThreshold"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "An absolute number of votes needed for something to cross the threshold. Useful for multisig style voting.",
          "type": "object",
          "required": [
            "absolute_count"
          ],
          "properties": {
            "absolute_count": {
              "type": "object",
              "required": [
                "threshold"
              ],
              "properties": {
                "threshold": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "Vote": {
      "type": "string",
      "enum": [
        "yes",
        "no",
        "abstain"
      ]
    },
    "VoteOption": {
      "type": "string",
      "enum": [
        "yes",
        "no",
        "abstain",
        "no_with_veto"
      ]
    },
    "WasmMsg": {
      "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
      "oneOf": [
        {
          "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "contract_addr",
                "funds",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "msg": {
                  "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.16.0-alpha1/x/wasm/internal/types/tx.proto#L47-L61). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "instantiate"
          ],
          "properties": {
            "instantiate": {
              "type": "object",
              "required": [
                "code_id",
                "funds",
                "label",
                "msg"
              ],
              "properties": {
                "admin": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "label": {
                  "description": "A human-readbale label for the contract",
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "migrate"
          ],
          "properties": {
            "migrate": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg",
                "new_code_id"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "new_code_id": {
                  "description": "the code_id of the new logic to place in the given contract",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "update_admin"
          ],
          "properties": {
            "update_admin": {
              "type": "object",
              "required": [
                "admin",
                "contract_addr"
              ],
              "properties": {
                "admin": {
                  "type": "string"
                },
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "clear_admin"
          ],
          "properties": {
            "clear_admin": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
